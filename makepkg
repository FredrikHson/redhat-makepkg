#!/bin/bash

INSTALLER=${INSTALL_TOOL:-sudo yum install -y}
UNINSTALLER=${UNINSTALL_TOOL:-sudo yum remove -y}

pkgdir=$(readlink -f -m ./pkg)
srcdir=$(readlink -f -m ./src)
outdir=$(readlink -f -m .)

BOLD=""
NORMAL=""
RED=""
GREEN=""
if [[ -t 1 ]]; then
    ncolors=$(tput colors)
    if [[ -n "$ncolors" && $ncolors -ge 8 ]]; then
        BOLD="$(tput bold)"
        NORMAL="$(tput sgr0)"
        RED="$(tput setaf 1)"
        GREEN="$(tput setaf 2)"
    fi
fi

function printhelp
{
    echo "valid options"
    echo "-a = no archive (package())"
    echo "-b = no build()"
    echo "-c = Clean up work after build"
    echo "-C = Remove $srcdir before building"
    echo "-D = download location"
    echo "-d = no download use existing source files"
    echo "-e = no extract"
    echo "-O = rpm output location"
    echo "-p = no prepare()"
    echo "-P = alternative PKGBUILD file"
    echo "-S = install makedepends with \$INSTALL_TOOL before building (${INSTALLER})"
    echo "-U = cleanup makedepends with \$UNINSTALL_TOOL after building (${UNINSTALLER})"
    echo "-v = no source verification (md5/sha)"
    echo "-r = just print the rpm output name"
    echo "-m = just print the makedepends list"
    echo "-n = output package name prefix"
    echo "-w = fpm workdir sets where fpm puts its temporary files /tmp as default"
    echo "-i = install rpm after building"
    echo "-f = force build even if already built"
}
download_location=$(pwd)
pkgbuildfile="$(pwd)/PKGBUILD"

while getopts "hcCUSapbdevD:O:P:rmn:w:if" c; do
    case "$c" in
    h)
        printhelp
        exit 0
        ;;

    c)
        cleanupafter=1
        ;;

    C)
        echo "${GREEN}==>${NORMAL}${BOLD} Cleaning...${NORMAL}" >&2
        rm -rf "$srcdir"
        ;;

    S)
        installbefore=1
        ;;
    U)
        installcleanup=1
        ;;

    a)
        noarchive=1
        ;;

    p)
        noprepare=1
        ;;

    b)
        nobuild=1
        ;;
    d)
        nodownload=1
        ;;
    e)
        noextract=1
        ;;

    v)
        noverify=1
        ;;
    r)
        printrpmname=1
        ;;
    m)
        printmakedeps=1
        ;;
    n)
        nameprefix=$OPTARG
        ;;
    D)
        download_location=$(readlink -f -m "$OPTARG")
        ;;

    O)
        outdir=$(readlink -f -m "$OPTARG")
        ;;
    w)
        workdir=$(readlink -f -m "$OPTARG")
        ;;
    P)
        pkgbuildfile=$(readlink -f -m "$OPTARG")
        ;;
    i)
        install_after=1
        ;;
    f)
        forcebuild=1
        ;;

    \?)
        echo "invalid option $c"
        ;;
    :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
done

if [[ ! -e $pkgbuildfile ]]; then
    echo no PKGBUILD found.
    exit 1
fi

function extract()
{
    if [[ "${noextract[*]}" =~ "$1" ]]; then
        return
    fi
    if [ -f "$1" ]; then
        case $1 in
        *.tar.bz2)
            tar xjf "$1"
            echo "    ${BOLD}${NORMAL}$1"
            ;;
        *.tar.gz)
            tar xzf "$1"
            echo "    ${BOLD}${NORMAL}$1"
            ;;
        *.tar.lz)
            tar xf "$1"
            echo "    ${BOLD}${NORMAL}$1"
            ;;
        *.bz2)
            tar jxvf "$1"
            echo "    ${BOLD}${NORMAL}$1"
            ;;
        *.rar)
            unrar x "$1"
            echo "    ${BOLD}${NORMAL}$1"
            ;;
        *.gz)
            gunzip "$1"
            echo "    ${BOLD}${NORMAL}$1"
            ;;
        *.tar)
            tar xf "$1"
            echo "    ${BOLD}${NORMAL}$1"
            ;;
        *.tbz2)
            tar xjf "$1"
            echo "    ${BOLD}${NORMAL}$1"
            ;;
        *.tgz)
            tar xzf "$1"
            echo "    ${BOLD}${NORMAL}$1"
            ;;
        *.zip)
            unzip "$1"
            echo "    ${BOLD}${NORMAL}$1"
            ;;
        *.jar)
            unzip "$1"
            echo "    ${BOLD}${NORMAL}$1"
            ;;
        *.7z)
            7z x "$1"
            echo "    ${BOLD}${NORMAL}$1"
            ;;
        *.tar.xz)
            tar xf "$1"
            echo "    ${BOLD}${NORMAL}$1"
            ;;
        *) ;;

        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function clean()
{
    echo "${GREEN}==>${NORMAL}${BOLD} Cleaning...${NORMAL}" >&2
    rm -f -- *.rpm
    rm -rf pkg
}

function getSourcePath()
{
    echo "$1" | perl -pe 's/.*:://g' | perl -pe 's/.*?\+(.*:)/\1/g' | perl -pe 's/\#.*$//g'
}

function getSourceName()
{
    if [[ $(echo "$1" | grep ::) ]]; then
        echo "$1" | perl -pe 's/::.*//g'
    else
        basename "$1" | perl -pe 's/\#.*$//g' | perl -pe 's/\.git$//'
    fi
}

function getSourceFragment()
{
    echo "$1" | grep '#' | perl -pe 's/.*:://g' | perl -pe 's/.*?\+//g' | perl -pe 's/.*\#//g'
}

function getSourceVCS()
{ # none,http,git,svn
    if [[ $(echo "$1" | grep 'git+https*://') ]]; then
        echo git
        return
    fi
    if [[ $(echo "$1" | grep 'git+file*://') ]]; then
        echo git
        return
    fi
    if [[ $(echo "$1" | grep 'git://') ]]; then
        echo git
        return
    fi
    if [[ $(echo "$1" | grep 'svn+https*://') ]]; then
        echo svn
        return
    fi
    if [[ $(echo "$1" | grep 'https*://') ]]; then
        echo http
        return
    fi
    if [[ $(echo "$1" | grep 'ftps*://') ]]; then
        echo http
        return
    fi

    echo none
}

function downloadsources()
{
    if [[ -n "$download_location" ]]; then
        mkdir -p "$download_location"
        cd "$download_location"
    fi

    mkdir -p "$srcdir"
    restoreshopt=$(shopt -p)
    restoreoshopt=$(shopt -o -p)
    restoretrap=$(trap -p ERR)
    set +e
    errorgettingsources=0
    for src in "${source[@]}"; do
        src_name=$(getSourceName "$src")
        src_path=$(getSourcePath "$src")
        src_fragment=$(getSourceFragment "$src")
        vcs=$(getSourceVCS "$src")

        if [[ "$vcs" == "http" ]]; then
            if [[ ! -e "$src_name" ]]; then
                wget -nv -nc "$src_path" -O "$src_name"
                if [[ $? -ne 0 ]]; then
                    echo "${RED}==> ERROR: ${NORMAL}${BOLD}downloading $src failed${NORMAL}"
                    rm -rf "$src_name"
                    errorgettingsources=1
                fi
            fi
            pushd "$srcdir" &>/dev/null
            ln -sf "$download_location/$src_name" "$src_name"
            popd &>/dev/null
        fi
        if [[ "$vcs" == "git" ]]; then
            if [[ ! -e "$src_name" ]]; then
                git clone --bare "$src_path" "$src_name"
                if [[ $? -ne 0 ]]; then
                    echo "${RED}==> ERROR: ${NORMAL}${BOLD}$src can not be found or not a git repo${NORMAL}"
                    errorgettingsources=1
                fi
            else
                git --git-dir="$src_name" fetch origin +refs/tags/*:refs/tags/* --prune
                git --git-dir="$src_name" fetch origin +refs/heads/*:refs/heads/* --prune
            fi
            pushd "$srcdir" &>/dev/null
            rm -rf "$src_name"
            git clone "$download_location/$src_name" "$src_name"
            if [[ -n "${src_fragment}" ]]; then
                pushd "$src_name" &>/dev/null
                git checkout $(echo "${src_fragment}" | perl -pe "s/.*=//")
                popd &>/dev/null
            fi
            popd &>/dev/null
        fi
        if [[ "$vcs" == "svn" ]]; then
            if [[ ! -e "$src_name" ]]; then
                svn checkout "$src_path" "$src_name"
                if [[ $? -ne 0 ]]; then
                    echo "${RED}==> ERROR: ${NORMAL}${BOLD}$src can not be found or not a svn repo${NORMAL}"
                    errorgettingsources=1
                fi
            fi
            pushd "$srcdir" &>/dev/null
            cp -r "$download_location/$src_name" "$src_name"
            popd &>/dev/null
        fi
        if [[ "$vcs" == "none" ]]; then
            pushd "$srcdir" &>/dev/null
            if [ "${src_path:0:1}" = "/" ]; then
                if [[ -e "$src_path" ]]; then
                    cp -v "$src_path" "$src_name"
                else
                    echo "${RED}==> ERROR: ${NORMAL}${BOLD}Local file $src can not be found${NORMAL}"
                    errorgettingsources=1
                fi
            else
                if [[ -e "$(dirname "$pkgbuildfile")/$src_name" ]]; then
                    cp -v "$(dirname "$pkgbuildfile")/$src_name" "$src_name"
                else
                    echo "${RED}==> ERROR: ${NORMAL}${BOLD}Local file $src can not be found${NORMAL}"
                    errorgettingsources=1
                fi
            fi
            popd &>/dev/null
        fi
    done
    eval "$restoreshopt"
    eval "$restoreoshopt"
    eval "$restoretrap"
    if [[ $errorgettingsources -eq 1 ]]; then
        echo "${RED}==> ERROR: ${NORMAL}${BOLD}Failed to get one or more source files${NORMAL}"
        exit 1
    fi
}

function extractsources()
{
    mkdir -p "$srcdir"
    cd "$srcdir"

    for src in "${source[@]}"; do
        src_name=$(getSourceName "$src")
        vcs=$(getSourceVCS "$src")
        if [[ "$vcs" != "git" && "$vcs" != "svn" ]]; then
            extract "$src_name"
        fi
    done
}

function verifygit()
{
    local src_name=$1
    local sha=$2
    local actualsha=$(git --git-dir="$src_name"/.git rev-parse HEAD)
    if [[ "$actualsha" != "$sha" ]]; then
        echo "$src_name" tag/branch did not match "$sha" >&2
        exit 1
    fi
}

function verify()
{
    list=$1
    checksumprg=$2
    verified=1
    echo "${GREEN}==> ${NORMAL}${BOLD}Validating source files with $checksumprg...${NORMAL}" >&2
    for ((i = 0; i < $numberofsources; i++)); do
        src_name=$(getSourceName "${source[i]}")
        vcs=$(getSourceVCS "${source[i]}")
        checksum=$(echo "$(eval "echo \${${list}[i]}")")
        if [[ "${checksum}" == "SKIP" ]]; then
            echo "    $src_name ... Skipped" >&2
            continue
        fi
        if [[ "$vcs" == "git" ]]; then
            verifygit "$src_name" "${checksum}"
        else
            $checksumprg -c <(echo "${checksum}  $src_name") &>/dev/null
            if [[ $? -ne 0 ]]; then
                echo "    $src_name ... FAILED" >&2
                verified=0
            else
                echo "    $src_name ... Passed" >&2
            fi
        fi
    done
    if [[ $verified -eq 0 ]]; then
        echo "${RED}==> ERROR: ${NORMAL}${BOLD}One or more files did not pass the validity check!${NORMAL}" >&2
        exit 1
    fi
}

function verifysources()
{
    cd "$srcdir"
    numberofsources=${#source[@]}
    if [[ -n "$md5sums" ]]; then
        verify md5sums md5sum
    fi
    if [[ -n "$sha256sums" ]]; then
        verify sha256sums sha256sum
    fi
    if [[ -n "$sha1sums" ]]; then
        verify sha1sums sha1sum
    fi
    if [[ -n "$sha224sums" ]]; then
        verify sha224sums sha224sum
    fi
    if [[ -n "$sha384sums" ]]; then
        verify sha512sums sha512sum
    fi
    if [[ -n "$sha512sums" ]]; then
        verify sha512sums sha512sum
    fi
}

install_cleanuplist=""

function yum_makedepends()
{
    installedlist=$(rpm -qa --queryformat "%{NAME}\n")
    for dep in ${makedepends[@]}; do
        exists=$(echo "$installedlist" | grep "^$dep$")
        if [[ -z "$exists" ]]; then
            echo "$dep" needs to be installed
            install_cleanuplist="$install_cleanuplist $dep"
        fi
    done
    if [[ -n "$install_cleanuplist" ]]; then
        set -e
        $INSTALLER $install_cleanuplist
        set +e
    fi
}

function yum_cleanup()
{
    if [[ -n "$install_cleanuplist" ]]; then
        $UNINSTALLER $install_cleanuplist
    fi
}

function createrpm()
{
    local name=${1}
    ruby_version=$(ruby --version | perl -pe 's/ruby\s([0-9]).*/\1/g')
    if [[ "$ruby_version" -lt "2" ]]; then
        echo needs newer ruby
        if [[ -e "$HOME/.rvm/scripts/rvm" ]]; then
            echo using rvm to get ruby 2.3
            #setup ruby for fpm
            . "$HOME"/.rvm/scripts/rvm
            rvm 2.3
        else
            echo could not get a new enough ruby version to run fpm on update ruby or install rvm.
            exit 1
        fi
    fi
    cd "${pkgdir}"
    echo ${depends[@]}
    fpmflags=""
    for dep in ${depends[@]}; do
        fpmflags=$(echo "$fpmflags --depends \"$dep\"")
    done

    for conflict in ${conflicts[@]}; do
        fpmflags=$(echo "$fpmflags --conflicts \"$conflict\"")
    done

    for replace in ${replaces[@]}; do
        fpmflags=$(echo "$fpmflags --replaces \"$replace\"")
    done

    for provide in ${provides[@]}; do
        fpmflags=$(echo "$fpmflags --provides \"$provide\"")
    done

    if [[ -n "$license" ]]; then
        fpmflags=$(echo "$fpmflags --license \"${license}\"")
    fi
    if [[ -n "$url" ]]; then
        fpmflags=$(echo "$fpmflags --url \"$url\"")
    fi
    if [[ -n "$pkgdesc" ]]; then
        fpmflags=$(echo "$fpmflags --description \"$pkgdesc\"")
    fi
    if [[ -n "$workdir" ]]; then
        fpmflags=$(echo "$fpmflags --workdir \"$workdir\"")
    fi
    post_installfile=$(mktemp -u)
    pre_installfile=$(mktemp -u)
    post_removefile=$(mktemp -u)
    pre_removefile=$(mktemp -u)
    post_upgradefile=$(mktemp -u)
    pre_upgradefile=$(mktemp -u)
    if [[ -n "$install" ]]; then
        set +e
        installfile=$(dirname "$pkgbuildfile")/$install
        echo "install script ${installfile}"
        grep -q post_install "${installfile}"
        if [[ $? -eq 0 ]]; then
            cp "${installfile}" "${post_installfile}"
            echo post_install >>"${post_installfile}"
            fpmflags=$(echo "$fpmflags --after-install ${post_installfile}")
        fi
        grep -q pre_install "${installfile}"
        if [[ $? -eq 0 ]]; then
            cp "${installfile}" "${pre_installfile}"
            echo pre_install >>"${pre_installfile}"
            fpmflags=$(echo "$fpmflags --before-install ${pre_installfile}")
        fi
        grep -q post_remove "${installfile}"
        if [[ $? -eq 0 ]]; then
            cp "${installfile}" "${post_removefile}"
            echo post_remove >>"${post_removefile}"
            fpmflags=$(echo "$fpmflags --after-remove ${post_removefile}")
        fi
        grep -q pre_remove "${installfile}"
        if [[ $? -eq 0 ]]; then
            cp "${installfile}" "${pre_removefile}"
            echo pre_remove >>"${pre_removefile}"
            fpmflags=$(echo "$fpmflags --after-remove ${post_removefile}")
        fi
        grep -q post_upgrade "${installfile}"
        if [[ $? -eq 0 ]]; then
            cp "${installfile}" "${post_upgradefile}"
            echo post_upgrade >>"${post_upgradefile}"
            fpmflags=$(echo "$fpmflags --after-upgrade ${post_upgradefile}")
        fi
        grep -q pre_upgrade "${installfile}"
        if [[ $? -eq 0 ]]; then
            cp "${installfile}" "${pre_upgradefile}"
            echo pre_upgrade >>"${pre_upgradefile}"
            fpmflags=$(echo "$fpmflags --after-upgrade ${post_upgradefile}")
        fi
        set -e
    fi
    fpmver=$(echo "${pkgver}" | perl -pe 's/-/_/g')
    eval "fpm -s dir -t rpm -n ${nameprefix}$name -v ""${fpmver}"" \
        --iteration $pkgrel \
        --provides ${nameprefix}$name \
        --architecture ${CARCH} \
        ${fpmflags} \
        *"
    rm -f "${post_installfile}"
    rm -f "${pre_installfile}"
    rm -f "${post_removefile}"
    rm -f "${pre_removefile}"
    rm -f "${post_upgradefile}"
    rm -f "${pre_upgradefile}"
    if [[ ! -d "${outdir}" ]]; then
        mkdir -p "${outdir}"
    fi
    mv -v -- *.rpm "${outdir}"/
}

function concat_sources()
{
    if [[ -n "$(eval "echo \${source_${CARCH}[@]}")" ]]; then
        source=("${source[@]}" "$(eval "echo \${source_${CARCH}[@]}")")
        if [[ -n "$md5sums" ]]; then
            md5sums=("${md5sums[@]}" "$(eval "echo \${md5sums_${CARCH}[@]}")")
        fi
        if [[ -n "$sha256sums" ]]; then
            sha256sums=("${sha256sums[@]}" "$(eval "echo \${sha256sums_${CARCH}[@]}")")
        fi
        if [[ -n "$sha1sums" ]]; then
            sha1sums=("${sha1sums[@]}" "$(eval "echo \${sha1sums_${CARCH}[@]}")")
        fi
        if [[ -n "$sha224sums" ]]; then
            sha224sums=("${sha224sums[@]}" "$(eval "echo \${sha224sums_${CARCH}[@]}")")
        fi
        if [[ -n "$sha384sums" ]]; then
            sha384sums=("${sha384sums[@]}" "$(eval "echo \${sha384sums_${CARCH}[@]}")")
        fi
        if [[ -n "$sha512sums" ]]; then
            sha512sums=("${sha512sums[@]}" "$(eval "echo \${sha512sums_${CARCH}[@]}")")
        fi
    fi
}

function rpmname()
{
    fpmver=$(echo "${pkgver}" | perl -pe 's/-/_/g')
    for name in ${pkgname[@]}; do
        echo "./${nameprefix}""${name}"-"${fpmver}"-"${pkgrel}"."${CARCH}".rpm
    done
}

function run_func()
{
    func=$1
    echo "${GREEN}==> ${NORMAL}${BOLD}Starting ${func}()...${NORMAL}" >&2
    restoreshopt=$(shopt -p)
    restoreoshopt=$(shopt -o -p)
    restoretrap=$(trap -p ERR)
    trap "echo ${RED}==\> ERROR:${NORMAL}${BOLD} A failure occurred in ${func}\(\).${NORMAL}" ERR
    set -eE
    $func

    eval "$restoreshopt"
    eval "$restoreoshopt"
    eval "$restoretrap"

}

function installpkg()
{
    pushd "$outdir" &>/dev/null
    $INSTALLER $(rpmname)
    popd &>/dev/null

}

#setup the architecture flag
if [[ -z ${CARCH} ]]; then
    CARCH=$(arch)
fi

. "$pkgbuildfile"

if [[ -z "$forcebuild" ]]; then
    for checkrpm in $(rpmname); do
        if [[ -f "$checkrpm" ]]; then
            if [[ -n "$install_after" ]]; then
                installpkg
                exit 0
            else
                echo $checkrpm already built use -f to force
                exit 1
            fi
        fi
    done
fi

concat_sources
if [[ "$(type -t pkgver)" != "function" ]]; then
    if [[ -n "$printrpmname" ]]; then
        rpmname
        exit 0
    fi
fi

if [[ -n "$printmakedeps" ]]; then
    for i in ${makedepends[@]}; do
        echo "$i"
    done
    exit 0
fi

if [[ -n "$installbefore" ]]; then
    echo "${GREEN}==> ${NORMAL}${BOLD}Checking buildtime dependencies...${NORMAL}" >&2
    yum_makedepends
fi
set -e
if [[ -z "$nodownload" ]]; then
    if [[ -n "$printrpmname" ]]; then
        downloadsources &>/dev/null
    else
        echo "${GREEN}==> ${NORMAL}${BOLD}Retrieving sources...${NORMAL}" >&2
        downloadsources
    fi
fi
set +e
if [[ -z "$noverify" ]]; then
    if [[ -n "$printrpmname" ]]; then
        verifysources &>/dev/null
    else
        verifysources
    fi
fi
set -e

if [[ -z "$donotextractanything" ]]; then
    if [[ -n "$printrpmname" ]]; then
        extractsources &>/dev/null
    else
        echo "${GREEN}==>${NORMAL}${BOLD} Extracting sources...${NORMAL}" >&2
        extractsources
    fi
fi

if [[ "$(type -t pkgver)" == "function" ]]; then

    pkgver=$(pkgver)
fi

if [[ -n "$printrpmname" ]]; then
    rpmname
    exit 0
fi

if [[ -z "$noprepare" ]]; then
    if [[ "$(type -t prepare)" == "function" ]]; then
        cd "$srcdir"
        run_func prepare
    fi
fi

if [[ -z "$nobuild" ]]; then
    if [[ "$(type -t build)" == "function" ]]; then
        cd "$srcdir"
        run_func build
    fi
fi

if [[ -z "$noarchive" ]]; then
    if [[ ${#pkgname[@]} -eq 1 ]]; then
        if [[ "$(type -t package)" == "function" ]]; then
            cd "$srcdir"
            rm -rf "$pkgdir"
            mkdir -p "$pkgdir"
            run_func package
            echo "${GREEN}==> ${NORMAL}${BOLD}Creating RPM...${NORMAL}" >&2
            createrpm "$pkgname"
        else
            echo "${RED}==> ERROR:${NORMAL}${BOLD}Missing package function.${NORMAL}" >&2
            exit 1
        fi
    else
        orig_pkgdir=$pkgdir
        for name in ${pkgname[@]}; do
            if [[ "$(type -t package_"${name}")" == "function" ]]; then
                pkgdir=${orig_pkgdir}/${name}
                rm -rf "$pkgdir"
                mkdir -p "$pkgdir"
                run_func package_"${name}"
                echo "${GREEN}==> ${NORMAL}${BOLD}Creating RPM...${NORMAL}" >&2
                createrpm "${name}"
            else
                echo "${RED}==> ERROR:${NORMAL}${BOLD}Missing package_${name} function.${NORMAL}" >&2
                exit 1
            fi

        done
    fi
fi
set +e

if [[ -n "$cleanupafter" ]]; then
    rm -rf "$srcdir"
    rm -rf "$pkgdir"
fi

if [[ -n "$installcleanup" ]]; then
    yum_cleanup
fi

if [[ -n "$install_after" ]]; then
    installpkg
fi
